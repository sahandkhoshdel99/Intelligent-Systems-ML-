{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><br>\n",
    "\n",
    "<font color=#0C2C76 ><font>\n",
    "<p style = \"font-family:courier;\">\n",
    "    <font size=\"7\">\n",
    "        Intelligent Systems \n",
    "    </font>    \n",
    "</p>\n",
    "\n",
    " <br>\n",
    "    \n",
    "<font color=#CF3A69><font>\n",
    "<p style = \"font-family:optima;\">\n",
    "    <font size=\"6\">\n",
    "        Homework #2 - Desicion Trees & Genetic Algorithm \n",
    "    </font>    \n",
    "<font color=#000000> <font>\n",
    "</p>\n",
    "\n",
    "> $\\textit{Sahand Khoshdel - 810196607}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=#0C2C76 ><font>\n",
    "<p style = \"font-family:georgia;\">\n",
    "    <font size=\"6\">\n",
    "        Question 3 <br><br><b><font size=\"4\"> <font color=\"#A3678F\" >Applying Genetic Algorithm in Cryptography </b><font></font>\n",
    "    </font>    \n",
    "</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Genetic algorithms (GAs) are a <b> class of optimization\n",
    "algorithms.</b>  GAs <b> attempt to solve problems through modeling a\n",
    "simplified version of genetic processes</b> . There are many problems\n",
    "for which a Genetic Algorithm approach is useful. It is, however,\n",
    "undetermined if cryptanalysis is such a problem.\n",
    "Therefore, the <b> \n",
    "goal</b>  is trying to explore the <b> use of Genetic Algorithms in\n",
    "cryptography.</b>  The focus is to be on <b> substitution cipher. </b> The\n",
    "principles used in this cipher form the foundation for many of the\n",
    "modern cryptosystems. The<b>  frequency analysis </b>is used as an\n",
    "essential factor in objective function."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ciphertext is created by <b> choosing a permutation of the\n",
    "26-character alphabet and using it to replace each letter in the\n",
    "plaintext message.</b> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=#0C2C76 ><font>\n",
    "<p style = \"font-family:georgia;\">\n",
    "    <font size=\"6\">\n",
    "         <b><font size=\"4\"> <font color=\"#A3678F\" >Functions used in a Genetic Algorithm  </b><font></font>\n",
    "    </font>    \n",
    "</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lowercase_text(text):\n",
    "    s = \"Here should you're text go \"\n",
    "    b = s.lower()\n",
    "    return b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "key: jqxcfsynavketougdrpzbmwhil\n",
      "\n",
      "\n",
      "Original text:\n",
      " hello im here\n",
      "Encoded text:\n",
      " nfeeu at nfrf\n",
      "key: jqxcfsynavketougdrpzbmwhil\n",
      "\n",
      "\n",
      "Encoded text:\n",
      " nfeeu at nfrf\n",
      "Decoded text:\n",
      " Hlzzn Iv xlrl\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "import random as rand\n",
    "\n",
    "import re \n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "def encode(text,key):\n",
    "    translation_table = str.maketrans(\"abcdefghijklmnopqrstuvwxyz\" , key)\n",
    "    translated = text.translate(translation_table)\n",
    "    print(\"Original text:\\n\", text)\n",
    "    print(\"Encoded text:\\n\", translated)\n",
    "    return translated\n",
    "\n",
    "def decode(encoded_text,key):\n",
    "    translation_table = str.maketrans(key, \"abcdefghijklmnopqrstuvwxyz\")\n",
    "    translated = text.translate(translation_table)\n",
    "    print(\"Encoded text:\\n\", encoded_text)\n",
    "    print(\"Decoded text:\\n\", translated)\n",
    "    return translated\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def produce_genome(length = 26):\n",
    "    rand_key= []\n",
    "    random_key = np.random.permutation(length)\n",
    "    \n",
    "    for i in range(length):\n",
    "        rand_key.append((chr(97+random_key[i])))\n",
    "    \n",
    "    return rand_key \n",
    "    \n",
    "def generate_population(pop = 20, genome_length = 26):\n",
    "    population = []*pop\n",
    "    for i in range(pop):\n",
    "        population.append(produce_genome(genome_length))\n",
    "        #print(f\"key #{i+1}: {population[i]}\\n\\n\")\n",
    "    return population\n",
    "\n",
    "\n",
    "\n",
    "def ngram_hist(txt:str):\n",
    "    splitted_text = txt.split()\n",
    "    longest_word =  max(splitted_text, key=len)\n",
    "\n",
    "    ngram_counter = {}\n",
    "\n",
    "    for k in range(len(longest_word)):\n",
    "        #print(f\"splitted text : {splitted_text}\\n\\n\\n\")\n",
    "        #print(k)\n",
    "        ngram_elements = [] \n",
    "        frequency = [] \n",
    "        \n",
    "        for word in enumerate(splitted_text):\n",
    "            ngram = re.findall(r'(?=([a-zA-Z]{'+ str(k+1)+'}))', word[1])\n",
    "           # print(f\"ngram : {ngram}\\n\\n\\n\")\n",
    "            \n",
    "            for i,value in enumerate(ngram):\n",
    "                if value not in ngram_elements:\n",
    "                    ngram_elements.append(value)\n",
    "                    frequency.append(ngram.count(value))\n",
    "                    \n",
    "            ngram_counter[k] = dict(zip(ngram_elements,frequency))\n",
    "            #print(f\"ngram elements: {ngram_elements}\\n\\n\\n\")    \n",
    "    #print(f\"ngram_counter: {ngram_counter}\\n\\n\\n\")\n",
    "    return ngram_counter\n",
    "\n",
    "\n",
    "def fitness(ref,est):\n",
    "    ref_sep = ref.split()\n",
    "    longest_word =  max(ref_sep, key=len)\n",
    "    sub = {}\n",
    "    \n",
    "    fitness = 0\n",
    "    tot = 0\n",
    "    fitness_weights = [0.8,0.7,0.3,0.2,0.1]\n",
    "    \n",
    "    for j in range(len(longest_word)):\n",
    "        \n",
    "        ref_hist = ngram_hist(train) \n",
    "        tot += sum(ref_hist[j].values())*fitness_weights[j]\n",
    "        #for i in range(len(list(train_hist))):\n",
    "\n",
    "            #plt.bar(list(train_hist[i].keys()), train_hist[i].values(), color='b')\n",
    "            #plt.show()\n",
    "            \n",
    "        est_hist = ngram_hist(est)\n",
    "        \n",
    "        #for i in range(len(list(train_hist))):\n",
    "\n",
    "            #plt.bar(list(train_hist[i].keys()), train_hist[i].values(), color='b')\n",
    "            #plt.show()\n",
    "        \n",
    "        sub[j] = {key: ref_hist[j][key] - est_hist[j].get(key, 0) for key in ref_hist[j].keys()}\n",
    "        loss += sum(sub[j].values())*fitness_weights[j]\n",
    "    fitness = 1-(loss/tot)   \n",
    "    return sub,loss,fitness\n",
    "\n",
    "\n",
    "#print(fitness(ref,est)[2])\n",
    "    #for n in \n",
    "    #test \n",
    "    #pass\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#def sort_keys()\n",
    "    #pass\n",
    "\n",
    "def selection():\n",
    "    \n",
    "    pass\n",
    "\n",
    "def crossover():\n",
    "    pass\n",
    "\n",
    "def mutation_vector(length = 26):\n",
    "    return rand.choices([0,1], k = length)\n",
    "\n",
    "\n",
    "def mutation():\n",
    "    pass\n",
    "\n",
    "\n",
    "#ngram = ngram_hist(train.lower())\n",
    "#print(ngram)\n",
    "\n",
    "\n",
    "text = 'Hello Im here'\n",
    "# random_population = generate_population()\n",
    "# for i in range(len(random_population)):\n",
    "#     key = produce_population()\n",
    "#     stringed_key = \"\"\n",
    "#     stringed_key = stringed_key.join(key)\n",
    "#     encode(text.lower(),stringed_key)\n",
    "\n",
    "key = produce_genome()\n",
    "stringed_key = \"\"\n",
    "stringed_key = stringed_key.join(key)\n",
    "print(f\"key: {stringed_key}\\n\\n\")\n",
    "encoded = encode(text.lower(),stringed_key)\n",
    "print(f\"key: {stringed_key}\\n\\n\")\n",
    "decoded = decode(encoded,stringed_key)\n",
    "# text = \"Hello im here\"\n",
    "# encode(text.lower(),stringed_key)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "fitness() missing 1 required positional argument: 'est'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-5131fd767119>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpopulation_fitness\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mpopulation_fitness\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mpair_selection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-2-5131fd767119>\u001b[0m in \u001b[0;36mpair_selection\u001b[0;34m(population, elite_rate)\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mpopulation_fitness\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpopulation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m         \u001b[0mpopulation_fitness\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfitness\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpopulation\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpopulation_fitness\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mpopulation_fitness\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: fitness() missing 1 required positional argument: 'est'"
     ]
    }
   ],
   "source": [
    "pop = generate_population()\n",
    "\n",
    "def pair_selection(population,elite_rate = 0.1):\n",
    "    population_fitness = []\n",
    "    for i in range(len(population)):\n",
    "        population_fitness.append(fitness(population[i])[2])\n",
    "    print(population_fitness)    \n",
    "    return population_fitness\n",
    "pair_selection(pop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
